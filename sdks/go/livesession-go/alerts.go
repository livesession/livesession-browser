// This file was auto-generated by Fern from our API Definition.

package livesession

import (
	json "encoding/json"
	fmt "fmt"
	internal "go.livesession.io/livesession-go/internal"
)

type AlertCreate struct {
	Name           string            `json:"name" url:"-"`
	Events         []*AlertEvent     `json:"events,omitempty" url:"-"`
	Provider       AlertProviderEnum `json:"provider" url:"-"`
	SlackChannelId *string           `json:"slack_channel_id,omitempty" url:"-"`
	WebhookId      *string           `json:"webhook_id,omitempty" url:"-"`
}

type Alert struct {
	AlertId        *string            `json:"alert_id,omitempty" url:"alert_id,omitempty"`
	Name           *string            `json:"name,omitempty" url:"name,omitempty"`
	Events         []*AlertEvent      `json:"events,omitempty" url:"events,omitempty"`
	Provider       *AlertProviderEnum `json:"provider,omitempty" url:"provider,omitempty"`
	SlackChannelId *string            `json:"slack_channel_id,omitempty" url:"slack_channel_id,omitempty"`
	WebhookId      *string            `json:"webhook_id,omitempty" url:"webhook_id,omitempty"`
	Enabled        *bool              `json:"enabled,omitempty" url:"enabled,omitempty"`
	CreationDate   *string            `json:"creation_date,omitempty" url:"creation_date,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Alert) GetAlertId() *string {
	if a == nil {
		return nil
	}
	return a.AlertId
}

func (a *Alert) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *Alert) GetEvents() []*AlertEvent {
	if a == nil {
		return nil
	}
	return a.Events
}

func (a *Alert) GetProvider() *AlertProviderEnum {
	if a == nil {
		return nil
	}
	return a.Provider
}

func (a *Alert) GetSlackChannelId() *string {
	if a == nil {
		return nil
	}
	return a.SlackChannelId
}

func (a *Alert) GetWebhookId() *string {
	if a == nil {
		return nil
	}
	return a.WebhookId
}

func (a *Alert) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *Alert) GetCreationDate() *string {
	if a == nil {
		return nil
	}
	return a.CreationDate
}

func (a *Alert) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Alert) UnmarshalJSON(data []byte) error {
	type unmarshaler Alert
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Alert(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Alert) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AlertEvent struct {
	Kind  *int    `json:"kind,omitempty" url:"kind,omitempty"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AlertEvent) GetKind() *int {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AlertEvent) GetValue() *string {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *AlertEvent) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AlertEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler AlertEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AlertEvent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AlertEvent) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AlertProviderEnum string

const (
	AlertProviderEnumSlack    AlertProviderEnum = "slack"
	AlertProviderEnumWebhooks AlertProviderEnum = "webhooks"
)

func NewAlertProviderEnumFromString(s string) (AlertProviderEnum, error) {
	switch s {
	case "slack":
		return AlertProviderEnumSlack, nil
	case "webhooks":
		return AlertProviderEnumWebhooks, nil
	}
	var t AlertProviderEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AlertProviderEnum) Ptr() *AlertProviderEnum {
	return &a
}

type DeleteAlertsIdResponse struct {
	AlertId *string `json:"alert_id,omitempty" url:"alert_id,omitempty"`
	Deleted *bool   `json:"deleted,omitempty" url:"deleted,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteAlertsIdResponse) GetAlertId() *string {
	if d == nil {
		return nil
	}
	return d.AlertId
}

func (d *DeleteAlertsIdResponse) GetDeleted() *bool {
	if d == nil {
		return nil
	}
	return d.Deleted
}

func (d *DeleteAlertsIdResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteAlertsIdResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteAlertsIdResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteAlertsIdResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteAlertsIdResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type AlertUpdate struct {
	Name           *string            `json:"name,omitempty" url:"-"`
	Events         []*AlertEvent      `json:"events,omitempty" url:"-"`
	Provider       *AlertProviderEnum `json:"provider,omitempty" url:"-"`
	SlackChannelId *string            `json:"slack_channel_id,omitempty" url:"-"`
	WebhookId      *string            `json:"webhook_id,omitempty" url:"-"`
}
