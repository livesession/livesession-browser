// This file was auto-generated by Fern from our API Definition.

package livesession

import (
	json "encoding/json"
	fmt "fmt"
	internal "go.livesession.io/livesession-go/internal"
)

type WebsiteCreate struct {
	// Host
	Host string `json:"host" url:"-"`
	// Description
	Description *string `json:"description,omitempty" url:"-"`
}

type Website struct {
	// Website ID
	WebsiteId *string `json:"website_id,omitempty" url:"website_id,omitempty"`
	// Website host
	Host *string `json:"host,omitempty" url:"host,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *Website) GetWebsiteId() *string {
	if w == nil {
		return nil
	}
	return w.WebsiteId
}

func (w *Website) GetHost() *string {
	if w == nil {
		return nil
	}
	return w.Host
}

func (w *Website) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *Website) UnmarshalJSON(data []byte) error {
	type unmarshaler Website
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = Website(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *Website) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
