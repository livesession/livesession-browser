// This file was auto-generated by Fern from our API Definition.

package livesession

import (
	json "encoding/json"
	fmt "fmt"
	internal "go.livesession.io/livesession-go/internal"
)

type GetSessionsRequest struct {
	// The number of page to start with (default 0, max 10000).
	Page *int `json:"-" url:"page,omitempty"`
	// The number of page's size (default 25, max 100).
	Size *int `json:"-" url:"size,omitempty"`
	// The email address that you have associated with a session via [identify](https://developers.livesession.io/javascript-api/methods/#identify).
	Email *string `json:"-" url:"email,omitempty"`
	// The visitor ID.
	VisitorId *string `json:"-" url:"visitor_id,omitempty"`
	// IANA timezone. Default Europe/London if RelativeDateString is applied.
	Tz *string `json:"-" url:"tz,omitempty"`
	// ISO 8601 string or RelativeDateString. For RelativeDateString see table below for possible values.
	DateFrom *string `json:"-" url:"date_from,omitempty"`
	// ISO 8601 string or [RelativeDateString](#/components/schemas/RelativeDateString). For RelativeDateString see table below for possible values.
	DateTo *string `json:"-" url:"date_to,omitempty"`
}

type GetListSessionsResponse struct {
	Total    *int        `json:"total,omitempty" url:"total,omitempty"`
	Page     *Pagination `json:"page,omitempty" url:"page,omitempty"`
	Sessions []*Session  `json:"sessions,omitempty" url:"sessions,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetListSessionsResponse) GetTotal() *int {
	if g == nil {
		return nil
	}
	return g.Total
}

func (g *GetListSessionsResponse) GetPage() *Pagination {
	if g == nil {
		return nil
	}
	return g.Page
}

func (g *GetListSessionsResponse) GetSessions() []*Session {
	if g == nil {
		return nil
	}
	return g.Sessions
}

func (g *GetListSessionsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetListSessionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetListSessionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetListSessionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetListSessionsResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type Pagination struct {
	Num  *int `json:"num,omitempty" url:"num,omitempty"`
	Size *int `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *Pagination) GetNum() *int {
	if p == nil {
		return nil
	}
	return p.Num
}

func (p *Pagination) GetSize() *int {
	if p == nil {
		return nil
	}
	return p.Size
}

func (p *Pagination) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Pagination) UnmarshalJSON(data []byte) error {
	type unmarshaler Pagination
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Pagination(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *Pagination) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type Session struct {
	Id                  *string                         `json:"id,omitempty" url:"id,omitempty"`
	WebsiteId           *string                         `json:"website_id,omitempty" url:"website_id,omitempty"`
	SessionUrl          *string                         `json:"session_url,omitempty" url:"session_url,omitempty"`
	CreationTimestamp   *int                            `json:"creation_timestamp,omitempty" url:"creation_timestamp,omitempty"`
	Duration            *int                            `json:"duration,omitempty" url:"duration,omitempty"`
	EndTimestamp        *int                            `json:"end_timestamp,omitempty" url:"end_timestamp,omitempty"`
	ActiveTime          *int                            `json:"active_time,omitempty" url:"active_time,omitempty"`
	EndUrl              *string                         `json:"end_url,omitempty" url:"end_url,omitempty"`
	ExpirationTimestamp *int                            `json:"expiration_timestamp,omitempty" url:"expiration_timestamp,omitempty"`
	LastEventTimestamp  *int                            `json:"last_event_timestamp,omitempty" url:"last_event_timestamp,omitempty"`
	Product             *string                         `json:"product,omitempty" url:"product,omitempty"`
	Device              *string                         `json:"device,omitempty" url:"device,omitempty"`
	Tags                []string                        `json:"tags,omitempty" url:"tags,omitempty"`
	LastSeenPageViewId  *string                         `json:"last_seen_page_view_id,omitempty" url:"last_seen_page_view_id,omitempty"`
	Seen                *bool                           `json:"seen,omitempty" url:"seen,omitempty"`
	Referrer            *string                         `json:"referrer,omitempty" url:"referrer,omitempty"`
	StartUrl            *string                         `json:"start_url,omitempty" url:"start_url,omitempty"`
	VisitorFirstSession *bool                           `json:"visitor_first_session,omitempty" url:"visitor_first_session,omitempty"`
	EngagmentScore      *float64                        `json:"engagment_score,omitempty" url:"engagment_score,omitempty"`
	Visitor             *SessionVisitorData             `json:"visitor,omitempty" url:"visitor,omitempty"`
	Resolution          *SessionResolutionData          `json:"resolution,omitempty" url:"resolution,omitempty"`
	Os                  *SessionOsData                  `json:"os,omitempty" url:"os,omitempty"`
	Browser             *SessionBrowserData             `json:"browser,omitempty" url:"browser,omitempty"`
	Utm                 *SessionUtmData                 `json:"utm,omitempty" url:"utm,omitempty"`
	PageViewsStatistics *SessionPageViewsStatisticsData `json:"page_views_statistics,omitempty" url:"page_views_statistics,omitempty"`
	EventsStatistics    *SessionEventsStatisticsData    `json:"events_statistics,omitempty" url:"events_statistics,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *Session) GetId() *string {
	if s == nil {
		return nil
	}
	return s.Id
}

func (s *Session) GetWebsiteId() *string {
	if s == nil {
		return nil
	}
	return s.WebsiteId
}

func (s *Session) GetSessionUrl() *string {
	if s == nil {
		return nil
	}
	return s.SessionUrl
}

func (s *Session) GetCreationTimestamp() *int {
	if s == nil {
		return nil
	}
	return s.CreationTimestamp
}

func (s *Session) GetDuration() *int {
	if s == nil {
		return nil
	}
	return s.Duration
}

func (s *Session) GetEndTimestamp() *int {
	if s == nil {
		return nil
	}
	return s.EndTimestamp
}

func (s *Session) GetActiveTime() *int {
	if s == nil {
		return nil
	}
	return s.ActiveTime
}

func (s *Session) GetEndUrl() *string {
	if s == nil {
		return nil
	}
	return s.EndUrl
}

func (s *Session) GetExpirationTimestamp() *int {
	if s == nil {
		return nil
	}
	return s.ExpirationTimestamp
}

func (s *Session) GetLastEventTimestamp() *int {
	if s == nil {
		return nil
	}
	return s.LastEventTimestamp
}

func (s *Session) GetProduct() *string {
	if s == nil {
		return nil
	}
	return s.Product
}

func (s *Session) GetDevice() *string {
	if s == nil {
		return nil
	}
	return s.Device
}

func (s *Session) GetTags() []string {
	if s == nil {
		return nil
	}
	return s.Tags
}

func (s *Session) GetLastSeenPageViewId() *string {
	if s == nil {
		return nil
	}
	return s.LastSeenPageViewId
}

func (s *Session) GetSeen() *bool {
	if s == nil {
		return nil
	}
	return s.Seen
}

func (s *Session) GetReferrer() *string {
	if s == nil {
		return nil
	}
	return s.Referrer
}

func (s *Session) GetStartUrl() *string {
	if s == nil {
		return nil
	}
	return s.StartUrl
}

func (s *Session) GetVisitorFirstSession() *bool {
	if s == nil {
		return nil
	}
	return s.VisitorFirstSession
}

func (s *Session) GetEngagmentScore() *float64 {
	if s == nil {
		return nil
	}
	return s.EngagmentScore
}

func (s *Session) GetVisitor() *SessionVisitorData {
	if s == nil {
		return nil
	}
	return s.Visitor
}

func (s *Session) GetResolution() *SessionResolutionData {
	if s == nil {
		return nil
	}
	return s.Resolution
}

func (s *Session) GetOs() *SessionOsData {
	if s == nil {
		return nil
	}
	return s.Os
}

func (s *Session) GetBrowser() *SessionBrowserData {
	if s == nil {
		return nil
	}
	return s.Browser
}

func (s *Session) GetUtm() *SessionUtmData {
	if s == nil {
		return nil
	}
	return s.Utm
}

func (s *Session) GetPageViewsStatistics() *SessionPageViewsStatisticsData {
	if s == nil {
		return nil
	}
	return s.PageViewsStatistics
}

func (s *Session) GetEventsStatistics() *SessionEventsStatisticsData {
	if s == nil {
		return nil
	}
	return s.EventsStatistics
}

func (s *Session) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Session) UnmarshalJSON(data []byte) error {
	type unmarshaler Session
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Session(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *Session) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionBrowserData struct {
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	Name        *string `json:"name,omitempty" url:"name,omitempty"`
	Version     *string `json:"version,omitempty" url:"version,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SessionBrowserData) GetDescription() *string {
	if s == nil {
		return nil
	}
	return s.Description
}

func (s *SessionBrowserData) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SessionBrowserData) GetVersion() *string {
	if s == nil {
		return nil
	}
	return s.Version
}

func (s *SessionBrowserData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionBrowserData) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionBrowserData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionBrowserData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionBrowserData) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionEventsStatisticsData struct {
	Clicks      *int `json:"clicks,omitempty" url:"clicks,omitempty"`
	ErrorClicks *int `json:"error_clicks,omitempty" url:"error_clicks,omitempty"`
	RageClicks  *int `json:"rage_clicks,omitempty" url:"rage_clicks,omitempty"`
	ErrorLogs   *int `json:"error_logs,omitempty" url:"error_logs,omitempty"`
	NetErrors   *int `json:"net_errors,omitempty" url:"net_errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SessionEventsStatisticsData) GetClicks() *int {
	if s == nil {
		return nil
	}
	return s.Clicks
}

func (s *SessionEventsStatisticsData) GetErrorClicks() *int {
	if s == nil {
		return nil
	}
	return s.ErrorClicks
}

func (s *SessionEventsStatisticsData) GetRageClicks() *int {
	if s == nil {
		return nil
	}
	return s.RageClicks
}

func (s *SessionEventsStatisticsData) GetErrorLogs() *int {
	if s == nil {
		return nil
	}
	return s.ErrorLogs
}

func (s *SessionEventsStatisticsData) GetNetErrors() *int {
	if s == nil {
		return nil
	}
	return s.NetErrors
}

func (s *SessionEventsStatisticsData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionEventsStatisticsData) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionEventsStatisticsData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionEventsStatisticsData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionEventsStatisticsData) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionOsData struct {
	Name    *string `json:"name,omitempty" url:"name,omitempty"`
	Version *string `json:"version,omitempty" url:"version,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SessionOsData) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SessionOsData) GetVersion() *string {
	if s == nil {
		return nil
	}
	return s.Version
}

func (s *SessionOsData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionOsData) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionOsData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionOsData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionOsData) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionPageViewsStatisticsData struct {
	Count *int `json:"count,omitempty" url:"count,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SessionPageViewsStatisticsData) GetCount() *int {
	if s == nil {
		return nil
	}
	return s.Count
}

func (s *SessionPageViewsStatisticsData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionPageViewsStatisticsData) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionPageViewsStatisticsData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionPageViewsStatisticsData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionPageViewsStatisticsData) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionResolutionData struct {
	Height     *int    `json:"height,omitempty" url:"height,omitempty"`
	Width      *int    `json:"width,omitempty" url:"width,omitempty"`
	Resolution *string `json:"resolution,omitempty" url:"resolution,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SessionResolutionData) GetHeight() *int {
	if s == nil {
		return nil
	}
	return s.Height
}

func (s *SessionResolutionData) GetWidth() *int {
	if s == nil {
		return nil
	}
	return s.Width
}

func (s *SessionResolutionData) GetResolution() *string {
	if s == nil {
		return nil
	}
	return s.Resolution
}

func (s *SessionResolutionData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionResolutionData) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionResolutionData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionResolutionData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionResolutionData) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionUtmData struct {
	Source   *string `json:"source,omitempty" url:"source,omitempty"`
	Medium   *string `json:"medium,omitempty" url:"medium,omitempty"`
	Campaign *string `json:"campaign,omitempty" url:"campaign,omitempty"`
	Term     *string `json:"term,omitempty" url:"term,omitempty"`
	Content  *string `json:"content,omitempty" url:"content,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SessionUtmData) GetSource() *string {
	if s == nil {
		return nil
	}
	return s.Source
}

func (s *SessionUtmData) GetMedium() *string {
	if s == nil {
		return nil
	}
	return s.Medium
}

func (s *SessionUtmData) GetCampaign() *string {
	if s == nil {
		return nil
	}
	return s.Campaign
}

func (s *SessionUtmData) GetTerm() *string {
	if s == nil {
		return nil
	}
	return s.Term
}

func (s *SessionUtmData) GetContent() *string {
	if s == nil {
		return nil
	}
	return s.Content
}

func (s *SessionUtmData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionUtmData) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionUtmData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionUtmData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionUtmData) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionVisitorData struct {
	Id                    *string                        `json:"id,omitempty" url:"id,omitempty"`
	Ip                    *string                        `json:"ip,omitempty" url:"ip,omitempty"`
	Geolocation           *SessionVisitorDataGeolocation `json:"geolocation,omitempty" url:"geolocation,omitempty"`
	Name                  *string                        `json:"name,omitempty" url:"name,omitempty"`
	Email                 *string                        `json:"email,omitempty" url:"email,omitempty"`
	EmailHash             *string                        `json:"email_hash,omitempty" url:"email_hash,omitempty"`
	Params                []*SessionVisitorDataParams    `json:"params,omitempty" url:"params,omitempty"`
	LastSessionTimestamp  *int                           `json:"last_session_timestamp,omitempty" url:"last_session_timestamp,omitempty"`
	FirstSessionTimestamp *int                           `json:"first_session_timestamp,omitempty" url:"first_session_timestamp,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SessionVisitorData) GetId() *string {
	if s == nil {
		return nil
	}
	return s.Id
}

func (s *SessionVisitorData) GetIp() *string {
	if s == nil {
		return nil
	}
	return s.Ip
}

func (s *SessionVisitorData) GetGeolocation() *SessionVisitorDataGeolocation {
	if s == nil {
		return nil
	}
	return s.Geolocation
}

func (s *SessionVisitorData) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SessionVisitorData) GetEmail() *string {
	if s == nil {
		return nil
	}
	return s.Email
}

func (s *SessionVisitorData) GetEmailHash() *string {
	if s == nil {
		return nil
	}
	return s.EmailHash
}

func (s *SessionVisitorData) GetParams() []*SessionVisitorDataParams {
	if s == nil {
		return nil
	}
	return s.Params
}

func (s *SessionVisitorData) GetLastSessionTimestamp() *int {
	if s == nil {
		return nil
	}
	return s.LastSessionTimestamp
}

func (s *SessionVisitorData) GetFirstSessionTimestamp() *int {
	if s == nil {
		return nil
	}
	return s.FirstSessionTimestamp
}

func (s *SessionVisitorData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionVisitorData) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionVisitorData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionVisitorData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionVisitorData) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionVisitorDataGeolocation struct {
	CountryCode *string `json:"country_code,omitempty" url:"country_code,omitempty"`
	City        *string `json:"city,omitempty" url:"city,omitempty"`
	Region      *string `json:"region,omitempty" url:"region,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SessionVisitorDataGeolocation) GetCountryCode() *string {
	if s == nil {
		return nil
	}
	return s.CountryCode
}

func (s *SessionVisitorDataGeolocation) GetCity() *string {
	if s == nil {
		return nil
	}
	return s.City
}

func (s *SessionVisitorDataGeolocation) GetRegion() *string {
	if s == nil {
		return nil
	}
	return s.Region
}

func (s *SessionVisitorDataGeolocation) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionVisitorDataGeolocation) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionVisitorDataGeolocation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionVisitorDataGeolocation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionVisitorDataGeolocation) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SessionVisitorDataParams struct {
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SessionVisitorDataParams) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *SessionVisitorDataParams) GetValue() *string {
	if s == nil {
		return nil
	}
	return s.Value
}

func (s *SessionVisitorDataParams) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SessionVisitorDataParams) UnmarshalJSON(data []byte) error {
	type unmarshaler SessionVisitorDataParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SessionVisitorDataParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SessionVisitorDataParams) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
