/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Api from "../../../index";
export declare namespace Alerts {
    interface Options {
        environment?: core.Supplier<environments.ApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Alerts {
    protected readonly _options: Alerts.Options;
    constructor(_options: Alerts.Options);
    /**
     * ---
     * title: List alerts
     * group: [ENDPOINTS]
     * ---
     *
     * List of all alerts
     *
     * @param {Alerts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.alerts.list()
     */
    list(requestOptions?: Alerts.RequestOptions): Promise<Api.Alert[]>;
    /**
     * ---
     * title: Create alert
     * group: [ENDPOINTS]
     * ---
     *
     * Create alert
     *
     * @param {Api.AlertCreate} request
     * @param {Alerts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.alerts.create({
     *         name: "name",
     *         events: [{}],
     *         provider: "slack"
     *     })
     */
    create(request: Api.AlertCreate, requestOptions?: Alerts.RequestOptions): Promise<Api.Alert>;
    /**
     * ---
     * title: Update alert
     * group: [ENDPOINTS]
     * ---
     *
     * Update alert by ID
     *
     * @param {string} id - Unique identifier of the alert to update
     * @param {Api.AlertUpdate} request
     * @param {Alerts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.alerts.update("id")
     */
    update(id: string, request?: Api.AlertUpdate, requestOptions?: Alerts.RequestOptions): Promise<Api.Alert>;
    /**
     * ---
     * title: Delete alert
     * group: [ENDPOINTS]
     * ---
     *
     * Delete alert by ID
     *
     * @param {string} id - Unique identifier of the alert to delete
     * @param {Alerts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.alerts.delete("id")
     */
    delete(id: string, requestOptions?: Alerts.RequestOptions): Promise<Api.AlertsDeleteResponse>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
