/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Api from "../../../index";
export declare namespace Webhooks {
    interface Options {
        environment?: core.Supplier<environments.ApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Webhooks {
    protected readonly _options: Webhooks.Options;
    constructor(_options: Webhooks.Options);
    /**
     * ---
     * title: List webhooks
     * group: [ENDPOINTS]
     * ---
     *
     * List of all webhooks
     *
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.webhooks.list()
     */
    list(requestOptions?: Webhooks.RequestOptions): Promise<Api.Webhook[]>;
    /**
     * ---
     * title: Create webhook
     * group: [ENDPOINTS]
     * ---
     *
     * Create a webhook
     *
     * @param {Api.WebhookCreate} request
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.webhooks.create({
     *         url: "url",
     *         websiteId: "website_id",
     *         version: "version"
     *     })
     */
    create(request: Api.WebhookCreate, requestOptions?: Webhooks.RequestOptions): Promise<Api.Webhook>;
    /**
     * ---
     * title: Update webhook
     * group: [ENDPOINTS]
     * ---
     *
     * Update a webhook
     *
     * @param {string} id - ID of the webhook to update
     * @param {Api.WebhookUpdate} request
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.NotFoundError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.webhooks.update("id", {
     *         url: "url",
     *         websiteId: "website_id",
     *         webhookUpdateVersion: "version"
     *     })
     */
    update(id: string, request: Api.WebhookUpdate, requestOptions?: Webhooks.RequestOptions): Promise<Api.Webhook>;
    /**
     * ---
     * title: Delete webhook
     * group: [ENDPOINTS]
     * ---
     *
     * Delete a webhook
     *
     * @param {string} id - ID of the webhook to delete
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.NotFoundError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.webhooks.delete("id")
     */
    delete(id: string, requestOptions?: Webhooks.RequestOptions): Promise<Api.WebhookDeleted>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
