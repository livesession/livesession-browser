/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface AlertsDeleteResponse$1 {
    /** ID of the alert that was deleted */
    alertId?: string;
    /** Indicates whether the alert was successfully deleted */
    deleted?: boolean;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         name: "name",
 *         events: [{}],
 *         provider: "slack"
 *     }
 */
interface AlertCreate$1 {
    /** Name of the alert for easy identification */
    name: string;
    /** List of events that will trigger the alert */
    events: AlertEvent$1[];
    /** Notification provider for the alert, `slack` or `webhooks` */
    provider: AlertProviderEnum$1;
    /** Slack channel ID where notifications will be sent (required if provider is `slack`) */
    slackChannelId?: string;
    /** Webhook ID where notifications will be sent (required if provider is `webhooks`) */
    webhookId?: string;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {}
 */
interface AlertUpdate$1 {
    /** New name for the alert */
    name?: string;
    /** Updated list of events that will trigger the alert */
    events?: AlertEvent$1[];
    /** Updated notification provider for the alert */
    provider?: AlertProviderEnum$1;
    /** Updated Slack channel ID for notifications */
    slackChannelId?: string;
    /** Updated webhook ID for notifications */
    webhookId?: string;
}

declare namespace index_d$8 {
  export type { AlertCreate$1 as AlertCreate, AlertUpdate$1 as AlertUpdate, AlertsDeleteResponse$1 as AlertsDeleteResponse };
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
/**
 * @example
 *     {}
 */
interface GetSessionsRequest {
    /**
     * The number of page to start with (default 0, max 10000).
     */
    page?: number;
    /**
     * The number of page's size (default 25, max 100).
     */
    size?: number;
    /**
     * The email address that you have associated with a session via [identify](/docs/api/browser/methods#identify).
     */
    email?: string;
    /**
     * The visitor ID.
     */
    visitorId?: string;
    /**
     * IANA timezone. Default Europe/London if RelativeDateString is applied.
     */
    tz?: string;
    /**
     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) string or [RelativeDateString](/docs/api/rest/RelativeDateString).
     */
    dateFrom?: string;
    /**
     * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) string or [RelativeDateString](/docs/api/rest/RelativeDateString).
     */
    dateTo?: string;
}

type index_d$7_GetSessionsRequest = GetSessionsRequest;
declare namespace index_d$7 {
  export type { index_d$7_GetSessionsRequest as GetSessionsRequest };
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
/**
 * @example
 *     {
 *         url: "url",
 *         websiteId: "website_id",
 *         version: "version"
 *     }
 */
interface WebhookCreate$1 {
    /** URL for the webhook */
    url: string;
    /** Website ID */
    websiteId: string;
    /** API version (e.g., v1.0) */
    version: string;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
/**
 * @example
 *     {
 *         url: "url",
 *         websiteId: "website_id",
 *         webhookUpdateVersion: "version"
 *     }
 */
interface WebhookUpdate$1 {
    /**
     * API version
     */
    version: "v1.0";
    /** URL for the webhook */
    url: string;
    /** Website ID */
    websiteId: string;
    /** API version (e.g., v1.0) */
    webhookUpdateVersion: string;
}

declare namespace index_d$6 {
  export type { WebhookCreate$1 as WebhookCreate, WebhookUpdate$1 as WebhookUpdate };
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
/**
 * @example
 *     {
 *         host: "host"
 *     }
 */
interface WebsiteCreate$1 {
    /** Domain name or hostname of the website to track */
    host: string;
    /** Optional description of the website for organization purposes */
    description?: string;
}

declare namespace index_d$5 {
  export type { WebsiteCreate$1 as WebsiteCreate };
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
type OauthScope$1 = 
/**
 * read user sessions */
"users.sessions:read"
/**
 * read webhooks */
 | "webhooks:read"
/**
 * write webhooks */
 | "webhooks:write"
/**
 * read alerts */
 | "alerts:read"
/**
 * write alerts */
 | "alerts:write"
/**
 * read websites */
 | "websites:read"
/**
 * write websites */
 | "websites:write"
/**
 * write payment intents */
 | "payment_intents:write"
/**
 * confirm payment intents */
 | "payment_intents.confirm";
declare const OauthScope$1: {
    readonly UsersSessionsRead: "users.sessions:read";
    readonly WebhooksRead: "webhooks:read";
    readonly WebhooksWrite: "webhooks:write";
    readonly AlertsRead: "alerts:read";
    readonly AlertsWrite: "alerts:write";
    readonly WebsitesRead: "websites:read";
    readonly WebsitesWrite: "websites:write";
    readonly PaymentIntentsWrite: "payment_intents:write";
    readonly PaymentIntentsConfirm: "payment_intents.confirm";
};

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface ErrorResponseError$1 {
    /** Type of error (e.g., validation_error, authentication_error) */
    type?: string;
    /** Machine-readable error code */
    code?: string;
    /** Name of the parameter that caused the error */
    param?: string;
    /** Human-readable error message */
    message?: string;
    /** HTTP status code associated with the error */
    httpStatusCode?: number;
    /** Unique identifier for the request that caused the error */
    requestId?: string;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

interface ErrorResponse$1 {
    error?: ErrorResponseError$1;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

interface Session$1 {
    /** Unique identifier for the session */
    id?: string;
    /** ID of the website where the session was recorded */
    websiteId?: string;
    /** URL to view the session in LiveSession dashboard */
    sessionUrl?: string;
    /** Unix timestamp when the session was created */
    creationTimestamp?: number;
    /** Total duration of the session in seconds */
    duration?: number;
    /** Unix timestamp when the session ended */
    endTimestamp?: number;
    /** Total time the user was actively interacting with the page in seconds */
    activeTime?: number;
    /** The last URL visited during the session */
    endUrl?: string;
    /** Unix timestamp when the session recording will expire */
    expirationTimestamp?: number;
    /** Unix timestamp of the last event recorded in the session */
    lastEventTimestamp?: number;
    /** Product identifier associated with the session */
    product?: string;
    /** Device type (e.g., desktop, mobile, tablet) */
    device?: string;
    /** Custom tags associated with the session */
    tags?: string[];
    /** ID of the last page view in the session */
    lastSeenPageViewId?: string;
    /** Whether the session has been viewed in the dashboard */
    seen?: boolean;
    /** URL where the user came from before starting the session */
    referrer?: string;
    /** First URL visited during the session */
    startUrl?: string;
    /** Whether this is the visitor's first session */
    visitorFirstSession?: boolean;
    /** Calculated engagement score for the session (0-100) */
    engagmentScore?: number;
    visitor?: SessionVisitorData$1;
    resolution?: SessionResolutionData$1;
    os?: SessionOsData$1;
    browser?: SessionBrowserData$1;
    utm?: SessionUtmData$1;
    pageViewsStatistics?: SessionPageViewsStatisticsData$1;
    eventsStatistics?: SessionEventsStatisticsData$1;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

interface SessionVisitorData$1 {
    /** Unique identifier for the visitor */
    id?: string;
    /** IP address of the visitor */
    ip?: string;
    geolocation?: SessionVisitorDataGeolocation$1;
    /** Name of the visitor if identified */
    name?: string;
    /** Email address of the visitor if identified */
    email?: string;
    /** Hashed version of the visitor's email for privacy */
    emailHash?: string;
    /** Custom parameters associated with the visitor */
    params?: SessionVisitorDataParams$1[];
    /** Unix timestamp of the visitor's last session */
    lastSessionTimestamp?: number;
    /** Unix timestamp of the visitor's first session */
    firstSessionTimestamp?: number;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface SessionOsData$1 {
    /** Operating system name (e.g., Windows, macOS, iOS) */
    name?: string;
    /** Operating system version */
    version?: string;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface SessionBrowserData$1 {
    /** Full browser description string */
    description?: string;
    /** Browser name (e.g., Chrome, Firefox, Safari) */
    name?: string;
    /** Browser version */
    version?: string;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface SessionUtmData$1 {
    /** UTM source parameter (e.g., google, facebook) */
    source?: string;
    /** UTM medium parameter (e.g., cpc, social) */
    medium?: string;
    /** UTM campaign parameter */
    campaign?: string;
    /** UTM term parameter (search keywords) */
    term?: string;
    /** UTM content parameter */
    content?: string;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface SessionEventsStatisticsData$1 {
    /** Total number of clicks during the session */
    clicks?: number;
    /** Number of clicks on error elements */
    errorClicks?: number;
    /** Number of rapid clicks indicating user frustration */
    rageClicks?: number;
    /** Number of JavaScript errors logged */
    errorLogs?: number;
    /** Number of network errors encountered */
    netErrors?: number;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface SessionPageViewLocationData$1 {
    /** Base URL of the page */
    base?: string;
    /** Full URL of the page */
    href?: string;
    /** Origin of the page (protocol + hostname) */
    origin?: string;
    /** URL of the previous page */
    referrer?: string;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface SessionPageViewViewPortData$1 {
    /** Viewport height in pixels */
    height?: number;
    /** Viewport width in pixels */
    width?: number;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface SessionVisitorDataGeolocation$1 {
    /** Two-letter country code (ISO 3166-1 alpha-2) */
    countryCode?: string;
    /** City name */
    city?: string;
    /** Region or state name */
    region?: string;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface SessionVisitorDataParams$1 {
    /** Parameter name */
    name?: string;
    /** Parameter value */
    value?: string;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface SessionResolutionData$1 {
    /** Screen height in pixels */
    height?: number;
    /** Screen width in pixels */
    width?: number;
    /** Screen resolution (e.g., "1920x1080") */
    resolution?: string;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface SessionPageViewsStatisticsData$1 {
    /** Total number of page views in the session */
    count?: number;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

interface GetListSessionsResponse$1 {
    /** Total number of sessions matching the query */
    total?: number;
    page?: Pagination$1;
    /** List of session objects */
    sessions?: Session$1[];
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface Pagination$1 {
    /** Current page number */
    num?: number;
    /** Number of items per page */
    size?: number;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
/**
 * * `TODAY` - Today since midnight
 * * `YESTERDAY` - Yesterday since midnight
 * * `BEGINNING_OF_WEEK` - Nearest monday since midnight
 * * `BEGINNING_OF_MONTH` - 1st of the month since midnight
 * * `BEGINNING_OF_PREV_MONTH` - Previous 1st of the month since midnight
 * * `TODAY-7DAYS` - Exact 7 days ago since midnight
 * * `TODAY-30DAYS` - Exact 30 days ago since midnight
 */
type RelativeDateString$1 = "TODAY" | "YESTERDAY" | "BEGINNING_OF_WEEK" | "BEGINNING_OF_MONTH" | "BEGINNING_OF_PREV_MONTH" | "TODAY-7DAYS" | "TODAY-30DAYS";
declare const RelativeDateString$1: {
    readonly Today: "TODAY";
    readonly Yesterday: "YESTERDAY";
    readonly BeginningOfWeek: "BEGINNING_OF_WEEK";
    readonly BeginningOfMonth: "BEGINNING_OF_MONTH";
    readonly BeginningOfPrevMonth: "BEGINNING_OF_PREV_MONTH";
    readonly Today7Days: "TODAY-7DAYS";
    readonly Today30Days: "TODAY-30DAYS";
};

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface AlertEvent$1 {
    /** Kind of event, more info [here](/docs/api/rest/EventKind) */
    kind?: number;
    /** Value or threshold that triggers the alert */
    value?: string;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

interface Alert$1 {
    /** Unique identifier for the alert */
    alertId?: string;
    /** Name of the alert */
    name?: string;
    /** List of events that trigger the alert */
    events?: AlertEvent$1[];
    /** Notification provider for the alert */
    provider?: AlertProviderEnum$1;
    /** Slack channel ID for notifications */
    slackChannelId?: string;
    /** Webhook ID for notifications */
    webhookId?: string;
    /** Whether the alert is currently active */
    enabled?: boolean;
    /** [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp when the alert was created */
    creationDate?: string;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface AlertDeleted$1 {
    /** ID of the deleted alert */
    alertId?: string;
    /** Confirmation that the alert was deleted */
    deleted?: boolean;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
/**
 * Available notification providers for alerts
 */
type AlertProviderEnum$1 = "slack" | "webhooks";
declare const AlertProviderEnum$1: {
    readonly Slack: "slack";
    readonly Webhooks: "webhooks";
};

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface Webhook$1 {
    /** Webhook ID */
    webhookId?: string;
    /** URL for the webhook */
    url?: string;
    /** Website name */
    website?: string;
    /** Website ID */
    websiteId?: string;
    /** API version */
    version?: string;
    /** Webhook enabled status */
    enabled?: boolean;
    /** Unix timestamp for creation date */
    createdDate?: number;
    /** Creator of the webhook */
    createdBy?: string;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface WebhookDeleted$1 {
    /** Webhook ID */
    webhookId?: string;
    /** Indicates if the webhook was deleted */
    deleted?: boolean;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
interface Website$1 {
    /** Unique identifier for the website */
    websiteId?: string;
    /** Domain name or hostname of the website (e.g., example.com) */
    host?: string;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
declare class ApiError extends Error {
    readonly statusCode?: number;
    readonly body?: unknown;
    constructor({ message, statusCode, body }: {
        message?: string;
        statusCode?: number;
        body?: unknown;
    });
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
declare class ApiTimeoutError extends Error {
    constructor(message: string);
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare class BadRequestError extends ApiError {
    constructor(body: ErrorResponse$1);
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare class InternalServerError extends ApiError {
    constructor(body: ErrorResponse$1);
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare class NotFoundError extends ApiError {
    constructor(body?: unknown);
}

type index_d$4_BadRequestError = BadRequestError;
declare const index_d$4_BadRequestError: typeof BadRequestError;
type index_d$4_GetSessionsRequest = GetSessionsRequest;
type index_d$4_InternalServerError = InternalServerError;
declare const index_d$4_InternalServerError: typeof InternalServerError;
type index_d$4_NotFoundError = NotFoundError;
declare const index_d$4_NotFoundError: typeof NotFoundError;
declare namespace index_d$4 {
  export { type Alert$1 as Alert, type AlertCreate$1 as AlertCreate, type AlertDeleted$1 as AlertDeleted, type AlertEvent$1 as AlertEvent, AlertProviderEnum$1 as AlertProviderEnum, type AlertUpdate$1 as AlertUpdate, type AlertsDeleteResponse$1 as AlertsDeleteResponse, index_d$4_BadRequestError as BadRequestError, type ErrorResponse$1 as ErrorResponse, type ErrorResponseError$1 as ErrorResponseError, type GetListSessionsResponse$1 as GetListSessionsResponse, type index_d$4_GetSessionsRequest as GetSessionsRequest, index_d$4_InternalServerError as InternalServerError, index_d$4_NotFoundError as NotFoundError, OauthScope$1 as OauthScope, type Pagination$1 as Pagination, RelativeDateString$1 as RelativeDateString, type Session$1 as Session, type SessionBrowserData$1 as SessionBrowserData, type SessionEventsStatisticsData$1 as SessionEventsStatisticsData, type SessionOsData$1 as SessionOsData, type SessionPageViewLocationData$1 as SessionPageViewLocationData, type SessionPageViewViewPortData$1 as SessionPageViewViewPortData, type SessionPageViewsStatisticsData$1 as SessionPageViewsStatisticsData, type SessionResolutionData$1 as SessionResolutionData, type SessionUtmData$1 as SessionUtmData, type SessionVisitorData$1 as SessionVisitorData, type SessionVisitorDataGeolocation$1 as SessionVisitorDataGeolocation, type SessionVisitorDataParams$1 as SessionVisitorDataParams, type Webhook$1 as Webhook, type WebhookCreate$1 as WebhookCreate, type WebhookDeleted$1 as WebhookDeleted, type WebhookUpdate$1 as WebhookUpdate, type Website$1 as Website, type WebsiteCreate$1 as WebsiteCreate, index_d$8 as alerts, index_d$7 as sessions, index_d$6 as webhooks, index_d$5 as websites };
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
declare const ApiEnvironment: {
    readonly Default: "https://api.livesession.io/v1";
};
type ApiEnvironment = typeof ApiEnvironment.Default;

type Supplier<T> = T | Promise<T> | (() => T | Promise<T>);
declare const Supplier: {
    get: <T>(supplier: Supplier<T>) => Promise<T>;
};

type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
interface BaseSchema<Raw, Parsed> {
    parse: (raw: unknown, opts?: SchemaOptions) => MaybeValid<Parsed>;
    json: (parsed: unknown, opts?: SchemaOptions) => MaybeValid<Raw>;
    getType: () => SchemaType | SchemaType;
}
declare const SchemaType: {
    readonly BIGINT: "bigint";
    readonly DATE: "date";
    readonly ENUM: "enum";
    readonly LIST: "list";
    readonly STRING_LITERAL: "stringLiteral";
    readonly BOOLEAN_LITERAL: "booleanLiteral";
    readonly OBJECT: "object";
    readonly ANY: "any";
    readonly BOOLEAN: "boolean";
    readonly NUMBER: "number";
    readonly STRING: "string";
    readonly UNKNOWN: "unknown";
    readonly RECORD: "record";
    readonly SET: "set";
    readonly UNION: "union";
    readonly UNDISCRIMINATED_UNION: "undiscriminatedUnion";
    readonly NULLABLE: "nullable";
    readonly OPTIONAL: "optional";
    readonly OPTIONAL_NULLABLE: "optionalNullable";
};
type SchemaType = (typeof SchemaType)[keyof typeof SchemaType];
type MaybeValid<T> = Valid<T> | Invalid;
interface Valid<T> {
    ok: true;
    value: T;
}
interface Invalid {
    ok: false;
    errors: ValidationError[];
}
interface ValidationError {
    path: string[];
    message: string;
}
interface SchemaOptions {
    /**
     * how to handle unrecognized keys in objects
     *
     * @default "fail"
     */
    unrecognizedObjectKeys?: "fail" | "passthrough" | "strip";
    /**
     * whether to fail when an unrecognized discriminant value is
     * encountered in a union
     *
     * @default false
     */
    allowUnrecognizedUnionMembers?: boolean;
    /**
     * whether to fail when an unrecognized enum value is encountered
     *
     * @default false
     */
    allowUnrecognizedEnumValues?: boolean;
    /**
     * whether to allow data that doesn't conform to the schema.
     * invalid data is passed through without transformation.
     *
     * when this is enabled, .parse() and .json() will always
     * return `ok: true`. `.parseOrThrow()` and `.jsonOrThrow()`
     * will never fail.
     *
     * @default false
     */
    skipValidation?: boolean;
    /**
     * each validation failure contains a "path" property, which is
     * the breadcrumbs to the offending node in the JSON. you can supply
     * a prefix that is prepended to all the errors' paths. this can be
     * helpful for zurg's internal debug logging.
     */
    breadcrumbsPrefix?: string[];
    /**
     * whether to send 'null' for optional properties explicitly set to 'undefined'.
     */
    omitUndefined?: boolean;
}

type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> & BaseSchema<Raw, Parsed> & ObjectLikeUtils<Raw, Parsed>;
interface ObjectLikeUtils<Raw, Parsed> {
    withParsedProperties: <T extends Record<string, any>>(properties: {
        [K in keyof T]: T[K] | ((parsed: Parsed) => T[K]);
    }) => ObjectLikeSchema<Raw, Parsed & T>;
}

interface SchemaUtils<Raw, Parsed> {
    nullable: () => Schema<Raw | null, Parsed | null>;
    optional: () => Schema<Raw | null | undefined, Parsed | undefined>;
    optionalNullable: () => Schema<Raw | null | undefined, Parsed | null | undefined>;
    transform: <Transformed>(transformer: SchemaTransformer<Parsed, Transformed>) => Schema<Raw, Transformed>;
    parseOrThrow: (raw: unknown, opts?: SchemaOptions) => Parsed;
    jsonOrThrow: (raw: unknown, opts?: SchemaOptions) => Raw;
}
interface SchemaTransformer<Parsed, Transformed> {
    transform: (parsed: Parsed) => Transformed;
    untransform: (transformed: any) => Parsed;
}

type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> & ObjectLikeUtils<Raw, Parsed> & ObjectUtils<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
interface BaseObjectSchema<Raw, Parsed> extends BaseSchema<Raw, Parsed> {
    _getRawProperties: () => (keyof Raw)[];
    _getParsedProperties: () => (keyof Parsed)[];
}
interface ObjectUtils<Raw, Parsed> {
    extend: <RawExtension, ParsedExtension>(schemas: ObjectSchema<RawExtension, ParsedExtension>) => ObjectSchema<Raw & RawExtension, Parsed & ParsedExtension>;
    passthrough: () => ObjectSchema<Raw & {
        [key: string]: unknown;
    }, Parsed & {
        [key: string]: unknown;
    }>;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare namespace Sessions {
    interface Options {
        environment?: Supplier<ApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: Supplier<string>;
        apiKey: Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
declare class Sessions {
    protected readonly _options: Sessions.Options;
    constructor(_options: Sessions.Options);
    /**
     * ---
     * title: List sessions
     * group: [ENDPOINTS]
     * ---
     *
     * List of all sessions
     *
     * @param {Api.GetSessionsRequest} request
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.sessions.getSessions()
     */
    getSessions(request?: GetSessionsRequest, requestOptions?: Sessions.RequestOptions): Promise<GetListSessionsResponse$1>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare namespace Alerts {
    interface Options {
        environment?: Supplier<ApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: Supplier<string>;
        apiKey: Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
declare class Alerts {
    protected readonly _options: Alerts.Options;
    constructor(_options: Alerts.Options);
    /**
     * ---
     * title: List alerts
     * group: [ENDPOINTS]
     * ---
     *
     * List of all alerts
     *
     * @param {Alerts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.alerts.list()
     */
    list(requestOptions?: Alerts.RequestOptions): Promise<Alert$1[]>;
    /**
     * ---
     * title: Create alert
     * group: [ENDPOINTS]
     * ---
     *
     * Create alert
     *
     * @param {Api.AlertCreate} request
     * @param {Alerts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.alerts.create({
     *         name: "name",
     *         events: [{}],
     *         provider: "slack"
     *     })
     */
    create(request: AlertCreate$1, requestOptions?: Alerts.RequestOptions): Promise<Alert$1>;
    /**
     * ---
     * title: Update alert
     * group: [ENDPOINTS]
     * ---
     *
     * Update alert by ID
     *
     * @param {string} id - Unique identifier of the alert to update
     * @param {Api.AlertUpdate} request
     * @param {Alerts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.alerts.update("id")
     */
    update(id: string, request?: AlertUpdate$1, requestOptions?: Alerts.RequestOptions): Promise<Alert$1>;
    /**
     * ---
     * title: Delete alert
     * group: [ENDPOINTS]
     * ---
     *
     * Delete alert by ID
     *
     * @param {string} id - Unique identifier of the alert to delete
     * @param {Alerts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.alerts.delete("id")
     */
    delete(id: string, requestOptions?: Alerts.RequestOptions): Promise<AlertsDeleteResponse$1>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare namespace Webhooks {
    interface Options {
        environment?: Supplier<ApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: Supplier<string>;
        apiKey: Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
declare class Webhooks {
    protected readonly _options: Webhooks.Options;
    constructor(_options: Webhooks.Options);
    /**
     * ---
     * title: List webhooks
     * group: [ENDPOINTS]
     * ---
     *
     * List of all webhooks
     *
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.webhooks.list()
     */
    list(requestOptions?: Webhooks.RequestOptions): Promise<Webhook$1[]>;
    /**
     * ---
     * title: Create webhook
     * group: [ENDPOINTS]
     * ---
     *
     * Create a webhook
     *
     * @param {Api.WebhookCreate} request
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.webhooks.create({
     *         url: "url",
     *         websiteId: "website_id",
     *         version: "version"
     *     })
     */
    create(request: WebhookCreate$1, requestOptions?: Webhooks.RequestOptions): Promise<Webhook$1>;
    /**
     * ---
     * title: Update webhook
     * group: [ENDPOINTS]
     * ---
     *
     * Update a webhook
     *
     * @param {string} id - ID of the webhook to update
     * @param {Api.WebhookUpdate} request
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.NotFoundError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.webhooks.update("id", {
     *         url: "url",
     *         websiteId: "website_id",
     *         webhookUpdateVersion: "version"
     *     })
     */
    update(id: string, request: WebhookUpdate$1, requestOptions?: Webhooks.RequestOptions): Promise<Webhook$1>;
    /**
     * ---
     * title: Delete webhook
     * group: [ENDPOINTS]
     * ---
     *
     * Delete a webhook
     *
     * @param {string} id - ID of the webhook to delete
     * @param {Webhooks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.NotFoundError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.webhooks.delete("id")
     */
    delete(id: string, requestOptions?: Webhooks.RequestOptions): Promise<WebhookDeleted$1>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare namespace Websites {
    interface Options {
        environment?: Supplier<ApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: Supplier<string>;
        apiKey: Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
declare class Websites {
    protected readonly _options: Websites.Options;
    constructor(_options: Websites.Options);
    /**
     * ---
     * title: List websites
     * group: [ENDPOINTS]
     * ---
     *
     * List of all websites
     *
     * @param {Websites.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.websites.list()
     */
    list(requestOptions?: Websites.RequestOptions): Promise<Website$1[]>;
    /**
     * ---
     * title: Create website
     * group: [ENDPOINTS]
     * ---
     *
     * Create a website
     *
     * @param {Api.WebsiteCreate} request
     * @param {Websites.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Api.BadRequestError}
     * @throws {@link Api.InternalServerError}
     *
     * @example
     *     await client.websites.create({
     *         host: "host"
     *     })
     */
    create(request: WebsiteCreate$1, requestOptions?: Websites.RequestOptions): Promise<Website$1>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare namespace ApiClient {
    interface Options {
        environment?: Supplier<ApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: Supplier<string>;
        apiKey: Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
declare class ApiClient {
    protected readonly _options: ApiClient.Options;
    protected _sessions: Sessions | undefined;
    protected _alerts: Alerts | undefined;
    protected _webhooks: Webhooks | undefined;
    protected _websites: Websites | undefined;
    constructor(_options: ApiClient.Options);
    get sessions(): Sessions;
    get alerts(): Alerts;
    get webhooks(): Webhooks;
    get websites(): Websites;
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const AlertsDeleteResponse: ObjectSchema<AlertsDeleteResponse.Raw, AlertsDeleteResponse$1>;
declare namespace AlertsDeleteResponse {
    interface Raw {
        alert_id?: string | null;
        deleted?: boolean | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const AlertEvent: ObjectSchema<AlertEvent.Raw, AlertEvent$1>;
declare namespace AlertEvent {
    interface Raw {
        kind?: number | null;
        value?: string | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const AlertProviderEnum: Schema<AlertProviderEnum.Raw, AlertProviderEnum$1>;
declare namespace AlertProviderEnum {
    type Raw = "slack" | "webhooks";
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const Alert: ObjectSchema<Alert.Raw, Alert$1>;
declare namespace Alert {
    interface Raw {
        alert_id?: string | null;
        name?: string | null;
        events?: AlertEvent.Raw[] | null;
        provider?: AlertProviderEnum.Raw | null;
        slack_channel_id?: string | null;
        webhook_id?: string | null;
        enabled?: boolean | null;
        creation_date?: string | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const Response$2: Schema<Response$2.Raw, Alert$1[]>;
declare namespace Response$2 {
    type Raw = Alert.Raw[];
}

declare namespace list_d$2 {
  export { Response$2 as Response };
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const AlertCreate: Schema<AlertCreate.Raw, AlertCreate$1>;
declare namespace AlertCreate {
    interface Raw {
        name: string;
        events: AlertEvent.Raw[];
        provider: AlertProviderEnum.Raw;
        slack_channel_id?: string | null;
        webhook_id?: string | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const AlertUpdate: Schema<AlertUpdate.Raw, AlertUpdate$1>;
declare namespace AlertUpdate {
    interface Raw {
        name?: string | null;
        events?: AlertEvent.Raw[] | null;
        provider?: AlertProviderEnum.Raw | null;
        slack_channel_id?: string | null;
        webhook_id?: string | null;
    }
}

declare const index_d$3_AlertCreate: typeof AlertCreate;
declare const index_d$3_AlertUpdate: typeof AlertUpdate;
declare const index_d$3_AlertsDeleteResponse: typeof AlertsDeleteResponse;
declare namespace index_d$3 {
  export { index_d$3_AlertCreate as AlertCreate, index_d$3_AlertUpdate as AlertUpdate, index_d$3_AlertsDeleteResponse as AlertsDeleteResponse, list_d$2 as list };
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const Webhook: ObjectSchema<Webhook.Raw, Webhook$1>;
declare namespace Webhook {
    interface Raw {
        webhook_id?: string | null;
        url?: string | null;
        website?: string | null;
        website_id?: string | null;
        version?: string | null;
        enabled?: boolean | null;
        created_date?: number | null;
        created_by?: string | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const Response$1: Schema<Response$1.Raw, Webhook$1[]>;
declare namespace Response$1 {
    type Raw = Webhook.Raw[];
}

declare namespace list_d$1 {
  export { Response$1 as Response };
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const WebhookCreate: Schema<WebhookCreate.Raw, WebhookCreate$1>;
declare namespace WebhookCreate {
    interface Raw {
        url: string;
        website_id: string;
        version: string;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const WebhookUpdate: Schema<WebhookUpdate.Raw, Omit<WebhookUpdate$1, "version">>;
declare namespace WebhookUpdate {
    interface Raw {
        url: string;
        website_id: string;
        version: string;
    }
}

declare const index_d$2_WebhookCreate: typeof WebhookCreate;
declare const index_d$2_WebhookUpdate: typeof WebhookUpdate;
declare namespace index_d$2 {
  export { index_d$2_WebhookCreate as WebhookCreate, index_d$2_WebhookUpdate as WebhookUpdate, list_d$1 as list };
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const Website: ObjectSchema<Website.Raw, Website$1>;
declare namespace Website {
    interface Raw {
        website_id?: string | null;
        host?: string | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const Response: Schema<Response.Raw, Website$1[]>;
declare namespace Response {
    type Raw = Website.Raw[];
}

declare const list_d_Response: typeof Response;
declare namespace list_d {
  export { list_d_Response as Response };
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const WebsiteCreate: Schema<WebsiteCreate.Raw, WebsiteCreate$1>;
declare namespace WebsiteCreate {
    interface Raw {
        host: string;
        description?: string | null;
    }
}

declare const index_d$1_WebsiteCreate: typeof WebsiteCreate;
declare namespace index_d$1 {
  export { index_d$1_WebsiteCreate as WebsiteCreate, list_d as list };
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const OauthScope: Schema<OauthScope.Raw, OauthScope$1>;
declare namespace OauthScope {
    type Raw = "users.sessions:read" | "webhooks:read" | "webhooks:write" | "alerts:read" | "alerts:write" | "websites:read" | "websites:write" | "payment_intents:write" | "payment_intents.confirm";
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const ErrorResponseError: ObjectSchema<ErrorResponseError.Raw, ErrorResponseError$1>;
declare namespace ErrorResponseError {
    interface Raw {
        type?: string | null;
        code?: string | null;
        param?: string | null;
        message?: string | null;
        http_status_code?: number | null;
        request_id?: string | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const ErrorResponse: ObjectSchema<ErrorResponse.Raw, ErrorResponse$1>;
declare namespace ErrorResponse {
    interface Raw {
        error?: ErrorResponseError.Raw | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const SessionVisitorDataGeolocation: ObjectSchema<SessionVisitorDataGeolocation.Raw, SessionVisitorDataGeolocation$1>;
declare namespace SessionVisitorDataGeolocation {
    interface Raw {
        country_code?: string | null;
        city?: string | null;
        region?: string | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const SessionVisitorDataParams: ObjectSchema<SessionVisitorDataParams.Raw, SessionVisitorDataParams$1>;
declare namespace SessionVisitorDataParams {
    interface Raw {
        name?: string | null;
        value?: string | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const SessionVisitorData: ObjectSchema<SessionVisitorData.Raw, SessionVisitorData$1>;
declare namespace SessionVisitorData {
    interface Raw {
        id?: string | null;
        ip?: string | null;
        geolocation?: SessionVisitorDataGeolocation.Raw | null;
        name?: string | null;
        email?: string | null;
        email_hash?: string | null;
        params?: SessionVisitorDataParams.Raw[] | null;
        last_session_timestamp?: number | null;
        first_session_timestamp?: number | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const SessionResolutionData: ObjectSchema<SessionResolutionData.Raw, SessionResolutionData$1>;
declare namespace SessionResolutionData {
    interface Raw {
        height?: number | null;
        width?: number | null;
        resolution?: string | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const SessionOsData: ObjectSchema<SessionOsData.Raw, SessionOsData$1>;
declare namespace SessionOsData {
    interface Raw {
        name?: string | null;
        version?: string | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const SessionBrowserData: ObjectSchema<SessionBrowserData.Raw, SessionBrowserData$1>;
declare namespace SessionBrowserData {
    interface Raw {
        description?: string | null;
        name?: string | null;
        version?: string | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const SessionUtmData: ObjectSchema<SessionUtmData.Raw, SessionUtmData$1>;
declare namespace SessionUtmData {
    interface Raw {
        source?: string | null;
        medium?: string | null;
        campaign?: string | null;
        term?: string | null;
        content?: string | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const SessionPageViewsStatisticsData: ObjectSchema<SessionPageViewsStatisticsData.Raw, SessionPageViewsStatisticsData$1>;
declare namespace SessionPageViewsStatisticsData {
    interface Raw {
        count?: number | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const SessionEventsStatisticsData: ObjectSchema<SessionEventsStatisticsData.Raw, SessionEventsStatisticsData$1>;
declare namespace SessionEventsStatisticsData {
    interface Raw {
        clicks?: number | null;
        error_clicks?: number | null;
        rage_clicks?: number | null;
        error_logs?: number | null;
        net_errors?: number | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const Session: ObjectSchema<Session.Raw, Session$1>;
declare namespace Session {
    interface Raw {
        id?: string | null;
        website_id?: string | null;
        session_url?: string | null;
        creation_timestamp?: number | null;
        duration?: number | null;
        end_timestamp?: number | null;
        active_time?: number | null;
        end_url?: string | null;
        expiration_timestamp?: number | null;
        last_event_timestamp?: number | null;
        product?: string | null;
        device?: string | null;
        tags?: string[] | null;
        last_seen_page_view_id?: string | null;
        seen?: boolean | null;
        referrer?: string | null;
        start_url?: string | null;
        visitor_first_session?: boolean | null;
        engagment_score?: number | null;
        visitor?: SessionVisitorData.Raw | null;
        resolution?: SessionResolutionData.Raw | null;
        os?: SessionOsData.Raw | null;
        browser?: SessionBrowserData.Raw | null;
        utm?: SessionUtmData.Raw | null;
        page_views_statistics?: SessionPageViewsStatisticsData.Raw | null;
        events_statistics?: SessionEventsStatisticsData.Raw | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const SessionPageViewLocationData: ObjectSchema<SessionPageViewLocationData.Raw, SessionPageViewLocationData$1>;
declare namespace SessionPageViewLocationData {
    interface Raw {
        base?: string | null;
        href?: string | null;
        origin?: string | null;
        referrer?: string | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const SessionPageViewViewPortData: ObjectSchema<SessionPageViewViewPortData.Raw, SessionPageViewViewPortData$1>;
declare namespace SessionPageViewViewPortData {
    interface Raw {
        height?: number | null;
        width?: number | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const Pagination: ObjectSchema<Pagination.Raw, Pagination$1>;
declare namespace Pagination {
    interface Raw {
        num?: number | null;
        size?: number | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const GetListSessionsResponse: ObjectSchema<GetListSessionsResponse.Raw, GetListSessionsResponse$1>;
declare namespace GetListSessionsResponse {
    interface Raw {
        total?: number | null;
        page?: Pagination.Raw | null;
        sessions?: Session.Raw[] | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const RelativeDateString: Schema<RelativeDateString.Raw, RelativeDateString$1>;
declare namespace RelativeDateString {
    type Raw = "TODAY" | "YESTERDAY" | "BEGINNING_OF_WEEK" | "BEGINNING_OF_MONTH" | "BEGINNING_OF_PREV_MONTH" | "TODAY-7DAYS" | "TODAY-30DAYS";
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const AlertDeleted: ObjectSchema<AlertDeleted.Raw, AlertDeleted$1>;
declare namespace AlertDeleted {
    interface Raw {
        alert_id?: string | null;
        deleted?: boolean | null;
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */

declare const WebhookDeleted: ObjectSchema<WebhookDeleted.Raw, WebhookDeleted$1>;
declare namespace WebhookDeleted {
    interface Raw {
        webhook_id?: string | null;
        deleted?: boolean | null;
    }
}

declare const index_d_Alert: typeof Alert;
declare const index_d_AlertCreate: typeof AlertCreate;
declare const index_d_AlertDeleted: typeof AlertDeleted;
declare const index_d_AlertEvent: typeof AlertEvent;
declare const index_d_AlertProviderEnum: typeof AlertProviderEnum;
declare const index_d_AlertUpdate: typeof AlertUpdate;
declare const index_d_AlertsDeleteResponse: typeof AlertsDeleteResponse;
declare const index_d_ErrorResponse: typeof ErrorResponse;
declare const index_d_ErrorResponseError: typeof ErrorResponseError;
declare const index_d_GetListSessionsResponse: typeof GetListSessionsResponse;
declare const index_d_OauthScope: typeof OauthScope;
declare const index_d_Pagination: typeof Pagination;
declare const index_d_RelativeDateString: typeof RelativeDateString;
declare const index_d_Session: typeof Session;
declare const index_d_SessionBrowserData: typeof SessionBrowserData;
declare const index_d_SessionEventsStatisticsData: typeof SessionEventsStatisticsData;
declare const index_d_SessionOsData: typeof SessionOsData;
declare const index_d_SessionPageViewLocationData: typeof SessionPageViewLocationData;
declare const index_d_SessionPageViewViewPortData: typeof SessionPageViewViewPortData;
declare const index_d_SessionPageViewsStatisticsData: typeof SessionPageViewsStatisticsData;
declare const index_d_SessionResolutionData: typeof SessionResolutionData;
declare const index_d_SessionUtmData: typeof SessionUtmData;
declare const index_d_SessionVisitorData: typeof SessionVisitorData;
declare const index_d_SessionVisitorDataGeolocation: typeof SessionVisitorDataGeolocation;
declare const index_d_SessionVisitorDataParams: typeof SessionVisitorDataParams;
declare const index_d_Webhook: typeof Webhook;
declare const index_d_WebhookCreate: typeof WebhookCreate;
declare const index_d_WebhookDeleted: typeof WebhookDeleted;
declare const index_d_WebhookUpdate: typeof WebhookUpdate;
declare const index_d_Website: typeof Website;
declare const index_d_WebsiteCreate: typeof WebsiteCreate;
declare namespace index_d {
  export { index_d_Alert as Alert, index_d_AlertCreate as AlertCreate, index_d_AlertDeleted as AlertDeleted, index_d_AlertEvent as AlertEvent, index_d_AlertProviderEnum as AlertProviderEnum, index_d_AlertUpdate as AlertUpdate, index_d_AlertsDeleteResponse as AlertsDeleteResponse, index_d_ErrorResponse as ErrorResponse, index_d_ErrorResponseError as ErrorResponseError, index_d_GetListSessionsResponse as GetListSessionsResponse, index_d_OauthScope as OauthScope, index_d_Pagination as Pagination, index_d_RelativeDateString as RelativeDateString, index_d_Session as Session, index_d_SessionBrowserData as SessionBrowserData, index_d_SessionEventsStatisticsData as SessionEventsStatisticsData, index_d_SessionOsData as SessionOsData, index_d_SessionPageViewLocationData as SessionPageViewLocationData, index_d_SessionPageViewViewPortData as SessionPageViewViewPortData, index_d_SessionPageViewsStatisticsData as SessionPageViewsStatisticsData, index_d_SessionResolutionData as SessionResolutionData, index_d_SessionUtmData as SessionUtmData, index_d_SessionVisitorData as SessionVisitorData, index_d_SessionVisitorDataGeolocation as SessionVisitorDataGeolocation, index_d_SessionVisitorDataParams as SessionVisitorDataParams, index_d_Webhook as Webhook, index_d_WebhookCreate as WebhookCreate, index_d_WebhookDeleted as WebhookDeleted, index_d_WebhookUpdate as WebhookUpdate, index_d_Website as Website, index_d_WebsiteCreate as WebsiteCreate, index_d$3 as alerts, index_d$2 as webhooks, index_d$1 as websites };
}

declare class Option {
    apiKey?: string;
}
declare class LiveSession extends ApiClient {
    constructor(...options: Option[]);
    static optionApiKey(apiKey: string): Option;
}

export { index_d$4 as Api, ApiClient, ApiEnvironment, ApiError, ApiTimeoutError, LiveSession as default, index_d as serialization };
